from fastapi import FastAPI
from fastapi.middleware.cors import CORSMiddleware
from pydantic import BaseModel
from random import random, choice

app = FastAPI(
    title="Gifts Battle Backend",
    description="–ü—Ä–æ—Å—Ç–æ–π —Å–µ—Ä–≤–µ—Ä –¥–ª—è –∏–º–∏—Ç–∞—Ü–∏–∏ —Ä—É–ª–µ—Ç–∫–∏, –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è –∏ –∏–Ω–≤–µ–Ω—Ç–∞—Ä—è",
    version="1.0.0"
)

# -----------------------
# –ù–ê–°–¢–†–û–ô–ö–ò CORS (–¥–ª—è WebApp)
# -----------------------
app.add_middleware(
    CORSMiddleware,
    allow_origins=["*"],  # –ø—Ä–∏ –¥–µ–ø–ª–æ–µ –∑–∞–º–µ–Ω–∏ –Ω–∞ —Å–≤–æ–π –¥–æ–º–µ–Ω
    allow_credentials=True,
    allow_methods=["*"],
    allow_headers=["*"],
)

# -----------------------
# –ú–û–î–ï–õ–ò –î–ê–ù–ù–´–•
# -----------------------
class SpinResult(BaseModel):
    prize: str
    balance: float

class BalanceRequest(BaseModel):
    amount: float
    currency: str

class WithdrawRequest(BaseModel):
    type: str  # "TON", "NFT" –∏–ª–∏ "STARS"
    amount: float

# -----------------------
# –í–†–ï–ú–ï–ù–ù–´–ï –ü–ï–†–ï–ú–ï–ù–ù–´–ï (–∏–º–∏—Ç–∞—Ü–∏—è –±–∞–∑—ã)
# -----------------------
user_balance = {
    "TON": 10.0,
    "STARS": 5000,
}

user_inventory = []

# -----------------------
# –†–û–£–¢–´
# -----------------------

@app.get("/")
def root():
    return {"message": "üéÅ Gifts Battle backend —Ä–∞–±–æ—Ç–∞–µ—Ç!"}


@app.get("/balance")
def get_balance():
    """–ü–æ–∫–∞–∑–∞—Ç—å –±–∞–ª–∞–Ω—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    return user_balance


@app.post("/topup")
def topup(req: BalanceRequest):
    """–ò–º–∏—Ç–∞—Ü–∏—è –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è –±–∞–ª–∞–Ω—Å–∞"""
    if req.currency in user_balance:
        user_balance[req.currency] += req.amount
        return {"status": "ok", "balance": user_balance}
    return {"status": "error", "message": "–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –≤–∞–ª—é—Ç–∞"}


@app.post("/spin")
def spin():
    """–†—É–ª–µ—Ç–∫–∞: —à–∞–Ω—Å –≤—ã–ø–∞–¥–µ–Ω–∏—è –ø–æ–¥–∞—Ä–∫–æ–≤ –∏ –Ω–∞–≥—Ä–∞–¥"""
    chance = random() * 100
    prize = None

    if chance < 45:
        prize = "üéÅ –ü–æ–¥–∞—Ä–æ–∫: –ú–∏—à–∫–∞"
        user_inventory.append(prize)
    elif chance < 75:
        prize = "üöÄ –ü–æ–¥–∞—Ä–æ–∫: –†–∞–∫–µ—Ç–∞"
        user_inventory.append(prize)
    elif chance < 100:
        # –°–ª—É—á–∞–π–Ω—ã–π –¥–µ–Ω–µ–∂–Ω—ã–π –ø—Ä–∏–∑
        options = [
            ("1 TON", 25),
            ("2 TON", 15),
            ("1000 STARS", 5),
            ("5000 STARS", 1)
        ]
        prizes = []
        for name, _ in options:
            prizes.append(name)
        prize = choice(prizes)
        if "TON" in prize:
            ton = int(prize.split()[0])
            user_balance["TON"] += ton
        else:
            stars = int(prize.split()[0])
            user_balance["STARS"] += stars
    else:
        prize = "üòî –ù–∏—á–µ–≥–æ –Ω–µ –≤—ã–ø–∞–ª–æ"

    return {"prize": prize, "balance": user_balance, "inventory": user_inventory}


@app.get("/inventory")
def get_inventory():
    """–ü–æ–∫–∞–∑–∞—Ç—å –ø—Ä–µ–¥–º–µ—Ç—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    return {"inventory": user_inventory}


@app.post("/withdraw")
def withdraw(req: WithdrawRequest):
    """–ò–º–∏—Ç–∞—Ü–∏—è –≤—ã–≤–æ–¥–∞ TON, NFT –∏–ª–∏ –∑–≤—ë–∑–¥"""
    if req.type == "TON":
        if user_balance["TON"] >= req.amount:
            user_balance["TON"] -= req.amount
            return {"status": "ok", "message": f"–í—ã–≤–µ–¥–µ–Ω–æ {req.amount} TON"}
        else:
            return {"status": "error", "message": "–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ TON"}
    elif req.type == "STARS":
        if user_balance["STARS"] >= req.amount:
            user_balance["STARS"] -= req.amount
            return {"status": "ok", "message": f"–í—ã–≤–µ–¥–µ–Ω–æ {req.amount} –∑–≤—ë–∑–¥"}
        else:
            return {"status": "error", "message": "–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –∑–≤—ë–∑–¥"}
    elif req.type == "NFT":
        return {"status": "ok", "message": "NFT –ø–µ—Ä–µ–¥–∞–Ω –º–µ–Ω–µ–¥–∂–µ—Ä—É"}
    else:
        return {"status": "error", "message": "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ç–∏–ø –≤—ã–≤–æ–¥–∞"}
